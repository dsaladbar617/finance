// Code generated by sqlc. DO NOT EDIT.
// source: expenses.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
  account_id,
  category_id,
  description,
  amount
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, account_id, category_id, description, amount
`

type CreateExpenseParams struct {
	AccountID   int64  `json:"account_id"`
	CategoryID  int64  `json:"category_id"`
	Description string `json:"description"`
	Amount      int64  `json:"amount"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.AccountID,
		arg.CategoryID,
		arg.Description,
		arg.Amount,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CategoryID,
		&i.Description,
		&i.Amount,
	)
	return i, err
}

const getExpense = `-- name: GetExpense :one
Select id, account_id, category_id, description, amount FROM expenses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpense(ctx context.Context, id int64) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CategoryID,
		&i.Description,
		&i.Amount,
	)
	return i, err
}
